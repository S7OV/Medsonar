# -*- coding: utf-8 -*-
"""1. –ú–æ–¥—É–ª—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–µ–π

# –ú–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤ (–ø–µ—Ä–≤—ã–π —ç—Ç–∞–ø)

–î–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç {MAX_RECORDS} –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤ –æ—Ç –∫–∞–∂–¥–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–∑ –æ–±—â–µ–π –ø–∞–ø–∫–∏.

–ù–∞ –≤—Ö–æ–¥–µ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ –ª–∏—Å—Ç–µ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤ —Ä–∞–±–æ—á–µ–π —Ç–∞–±–ª–∏—Ü–µ.

–ù–∞ –≤—ã—Ö–æ–¥–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ä–∞–±–æ—á—É—é —Ç–∞–±–ª–∏—Ü—É –≤ –ª–∏—Å—Ç –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ RAW.

### ======== –°–ª—É–∂–µ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ========
"""

# @title –†–∞–∑–Ω–æ–µ

import re

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ MP3 —Ñ–∞–π–ª–∞ —Å Google Drive
def load_mp3_from_google_drive(file_id: str, file_name: str) -> bytes:
    try:
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
        download_url = f'https://drive.google.com/uc?id={file_id}&export=download'

        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
        response = requests.get(download_url)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ MP3 —Ñ–∞–π–ª–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with open(file_name, "wb") as f:
            f.write(response.content)

        return response.content

    except requests.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
        return None

    except IOError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
def format_transcript(text):
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –ø–æ—Å–ª–µ –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    text = re.sub(r'([.!?])([^\s])', r'\1 \2', text)

    # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ –∑–Ω–∞–∫–∞–º –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è—è —Å–∞–º–∏ –∑–Ω–∞–∫–∏
    sentences = re.split(r'([.!?])', text)

    formatted_text = ''

    for i in range(0, len(sentences) - 1, 2):
        sentence = sentences[i].strip()
        punctuation = sentences[i + 1].strip()
        formatted_text += sentence + punctuation + '\n'

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if len(sentences) % 2 != 0:
        formatted_text += sentences[-1].strip()

    return formatted_text

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
def calculate_cost(duration_seconds):
    # –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ Whisper –Ω–∞ –º–æ–º–µ–Ω—Ç –Ω–∞–ø–∏—Å–∞–Ω–∏—è (—É—Ç–æ—á–Ω–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —É OpenAI)
    cost_per_minute = 0.006  # –î–æ–ª–ª–∞—Ä–æ–≤ –∑–∞ –º–∏–Ω—É—Ç—É
    cost = (duration_seconds / 60) * cost_per_minute
    return cost

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
def get_audio_info(filename):
    # –®–∞–±–ª–æ–Ω —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    pattern = r'.*(\d{4}-\d{2}-\d{2}_\d{2}-\d{2}-\d{2})\.\d+_from_(\d+)_to_(\d+)_session_(\d+)_\w+'

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –∫ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    match = re.match(pattern, filename)

    if match:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≥—Ä—É–ø–ø —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
        date_time = match.group(1)  # –î–∞—Ç–∞-–≤—Ä–µ–º—è
        from_number = match.group(2)  # –û—Ç –∫–æ–≥–æ –∑–≤–æ–Ω–æ–∫
        to_number = match.group(3)  # –ö–æ–º—É –∑–≤–æ–Ω–æ–∫
        session_id = match.group(4)  # –ù–æ–º–µ—Ä —Å–µ—Å—Å–∏–∏

        audio_info = {
            "filename": filename,
            "date_time": date_time,
            "from_number": from_number,
            "to_number": to_number,
            "session_id": session_id,
        }

    else:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –∏–º–µ–Ω–µ–º —Ñ–∞–π–ª–∞ –∏ –ø—Ä–æ—á–µ—Ä–∫–∞–º–∏
        audio_info = {
            "filename": filename,
            "date_time": "---",
            "from_number": "---",
            "to_number": "---",
            "session_id": "---",
        }

    return audio_info


# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
filename = "2024-06-24_12-15-45.096841_from_79615079433_to_049360_session_4109971104_talk.mp3"
audio_info = get_audio_info(filename)
print(audio_info)

# @title –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–∞—Ç–∞—Å–µ—Ç–∞
from pydrive2.auth import GoogleAuth
from pydrive2.drive import GoogleDrive
from google.colab import auth
from oauth2client.client import GoogleCredentials
from googleapiclient.errors import HttpError


def get_audio_list(folder_id_url, status_widget):
    # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤
    status_log = []

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ `status_widget`
    def update_status(new_status, is_temporary=False):
        nonlocal status_log
        if is_temporary:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
            status_log = [status for status in status_log if not status.startswith('üïë –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤')]
            status_log.append(new_status)
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∏ —É–¥–∞–ª—è–µ–º –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã —Å —á–∞—Å–∞–º–∏
            status_log = [status for status in status_log if 'üïë' not in status]
            status_log.append(new_status)

        # –û–±–Ω–æ–≤–ª—è–µ–º `status_widget` –∑–Ω–∞—á–µ–Ω–∏–µ–º, —Å–æ—Å—Ç–æ—è—â–∏–º –∏–∑ –≤—Å–µ—Ö —Å—Ç–∞—Ç—É—Å–æ–≤, —Å–æ–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ <br>
        status_widget.value = "<br>".join(status_log)


    progress.value = 10  # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    # –°—Ç–∞—Ç—É—Å: –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    update_status('üïë –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è Google...', is_temporary=True)
    sleep(0.5)  # –°–∏–º—É–ª—è—Ü–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ stopLoop –∏–∑ JavaScript
    if check_stop_loop():
        return

    # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    auth.authenticate_user()
    gauth = GoogleAuth()
    gauth.credentials = GoogleCredentials.get_application_default()
    drive = GoogleDrive(gauth)

    # –°—Ç–∞—Ç—É—Å: –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞
    update_status('‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è Google –∑–∞–≤–µ—Ä—à–µ–Ω–∞.')
    sleep(0.5)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ stopLoop –∏–∑ JavaScript
    if check_stop_loop():
        return

    # –°—Ç–∞—Ç—É—Å: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –∏–∑ —Å—Å—ã–ª–∫–∏
    update_status('üïë –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –ø–∞–ø–∫–∏ –∏–∑ —Å—Å—ã–ª–∫–∏...', is_temporary=True)
    sleep(0.5)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ stopLoop –∏–∑ JavaScript
    if check_stop_loop():
        return
    progress.value = 15  # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å

    pattern = r'folders/([a-zA-Z0-9_-]+)'
    match = re.search(pattern, folder_id_url)
    if not match:
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—Å—ã–ª–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç 'folders/<folder_id>'.")

    folder_id = match.group(1)
    update_status('‚úÖ ID –ø–∞–ø–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω.')

    # –°—Ç–∞—Ç—É—Å: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏
    update_status('üïë –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏...', is_temporary=True)
    try:
        for i in range(20, 30, 2):
            progress.value = i
            sleep(0.1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –±–æ–ª–µ–µ –ø–ª–∞–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ stopLoop –∏–∑ JavaScript
            if check_stop_loop():
                return
        drive.ListFile({'q': f"'{folder_id}' in parents and trashed=false"}).GetList()
        update_status('‚úÖ –ü–∞–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞.')
    except HttpError as e:
        if e.resp.status == 404:
            update_status('‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
            raise ValueError(f"–ü–∞–ø–∫–∞ {folder_id_url} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        else:
            update_status('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∞–ø–∫–∏.')
            raise



    # –°—Ç–∞—Ç—É—Å: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
    update_status('üïë –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏...', is_temporary=True)
    for i in range(30, 50, 4):
        progress.value = i
        sleep(0.01)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –±–æ–ª–µ–µ –ø–ª–∞–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞


    audio_list = []
    file_list = drive.ListFile({'q': f"'{folder_id}' in parents and trashed=false"}).GetList()
    total_files = len(file_list)
    update_status(f'‚úÖ –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—É—á–µ–Ω. –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {total_files}.')


    # –°—Ç–∞—Ç—É—Å: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
    update_status(f'üïë –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤... (0 –∏–∑ {total_files})', is_temporary=True)
    for idx, file in enumerate(file_list):
        file_size = int(file.get('fileSize', 0))  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ int
        FILTER = int(config['FILTER_AUDIO_SIZE'])
        if FILTER == 0 or file_size > FILTER:
            audio_info = get_audio_info(file['title'])
            audio_info['id'] = file['id']
            audio_list.append(audio_info)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ stopLoop –∏–∑ JavaScript
    if check_stop_loop():
        return

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ—Ç 60 –¥–æ 80 –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤
        sleep(0.01)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –±–æ–ª–µ–µ –ø–ª–∞–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        progress.value = 55 + int(20 * (idx + 1) / total_files)  # –ü—Ä–æ–≥—Ä–µ—Å—Å –æ—Ç 60 –¥–æ 80

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        if (idx + 1) % 100 == 0 or (idx + 1) == total_files:
            update_status(f'üïë –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤... ({idx + 1} –∏–∑ {total_files})', is_temporary=True)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ stopLoop –∏–∑ JavaScript
    if check_stop_loop():
        return

    progress.value = 75  # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    # –Ø–≤–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    status_log = [status for status in status_log if not status.startswith('üïë –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤')]
    update_status(f'‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(audio_list)}.')

    return audio_list

# @title –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∞—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –ø–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º
from collections import defaultdict

def get_records_by_list(audio_list, max_records=5):

    unique_to_numbers = defaultdict(list)
    original_counts = defaultdict(int)

    # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ª–æ–≤–∞—Ä–∏
    for record in audio_list:
        unique_to_numbers[record['to_number']].append(record)
        original_counts[record['to_number']] += 1

    # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–æ–º–µ—Ä–∞, —É –∫–æ—Ç–æ—Ä—ã—Ö –º–µ–Ω—å—à–µ max_records –∑–∞–ø–∏—Å–µ–π
    max_records = int(max_records)
    filtered_to_numbers = {to_number: records for to_number, records in unique_to_numbers.items() if len(records) >= max_records}

    # –°–æ—Å—Ç–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –≤–∫–ª—é—á–∞—è –Ω–µ –±–æ–ª–µ–µ max_records –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–æ–º–µ—Ä–∞
    result = [rec for to_number in filtered_to_numbers for rec in filtered_to_numbers[to_number][:max_records]]

    return result, original_counts

# @title –†–∞–±–æ—Ç–∞ —Å WHISPER API

def run_transcript(record, file_name):
    if not 'text' in record:
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
        client = openai.OpenAI()

        # –£–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–æ–≤–∞ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ prompt –ú–û–ñ–ù–û –î–û–ü–û–õ–ù–Ø–¢–¨ –î–õ–Ø –õ–£–ß–®–ï–ô –¢–†–ê–ù–°–ö–†–ò–ë–ê–¶–ò–ò:
        prompt = "–∫–ª–∏–Ω–∏–∫–∞ –ú–µ–¥—Å–æ–Ω–∞—Ä, –æ–ø–µ—Ä–∞—Ç–æ—Ä, –ü–µ—Ç—Ä–∞ –ú–µ—Ç–∞–ª—å–Ω–∏–∫–æ–≤–∞, –ë–æ—á–∞—Ä–Ω–∏–∫–æ–≤–∞"

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
        audio_segment = AudioSegment.from_file(file_name, format="mp3")
        audio_duration = audio_segment.duration_seconds

        if audio_duration > 1:
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º prompt –∏ –∑–∞–º–µ—Ä –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            start_time = time.time()
            transcript = client.audio.transcriptions.create(
                model="whisper-1",
                file=open(file_name, "rb"),
                prompt=prompt
            )
            end_time = time.time()
            elapsed_time = end_time - start_time

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
            text = transcript.text
            formatted_text = format_transcript(text)
            cost = calculate_cost(audio_duration)
        else:
            formatted_text = 'error'
            cost = 0
            elapsed_time = 0

        return {
            "text": formatted_text,
            "duration": round(audio_duration, 2),
            "elapsed_time": round(elapsed_time, 2),
            "cost": round(cost, 4)
        }

# @title –§—É–Ω–∫—Ü–∏–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∞"
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞—á–µ–Ω–∏—è stopLoop –∏–∑ JavaScript
from google.colab import output
def check_stop_loop():
    return output.eval_js('stopLoop')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ñ–ª–∞–≥–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ stopLoop –∏–∑ JavaScript
def reset_stop_loop():
    return output.eval_js('resetStopLoop()')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–ª–∞–≥–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ stopLoop –∏–∑ JavaScript
def set_stop_loop():
    return output.eval_js('setStopLoop()')

# @title –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∑–∞–ø–∏—Å—è–º

from datetime import datetime
def on_upload_button_click(b):
    upload_button.disabled = True
    transcription_button.disabled = True
    cancel_button.disabled = False

    progress.value = 0

    with output_area:
        clear_output()

        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ Google Spreadsheets
        # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        config_widget = widgets.HTML('<h2>üïë –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ä–∞–±–æ—á–µ–π —Ç–∞–±–ª–∏—Ü—ã...</h2>')
        config_widget.add_class('config-widget')
        display(config_widget)

        global config  # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        config = re_config(gs_client, colab_id, spreadsheet_url)

        sleep(1)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ stopLoop –∏–∑ JavaScript
        if check_stop_loop():
            return
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –≤–∏–¥–∂–µ—Ç–µ
        progress.value = 5  # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        config_widget.value = '<h2>‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.</h2>'

        # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        audio_widget = widgets.HTML('<h2>üïë –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–µ–π...</h2>')
        audio_widget.add_class('audio-widget')
        status_widget = widgets.HTML('')
        status_widget.add_class('status-widget')

        display(audio_widget)
        sleep(1)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ stopLoop –∏–∑ JavaScript
        if check_stop_loop():
            return
        display(status_widget)

        sleep(.5)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ stopLoop –∏–∑ JavaScript
        if check_stop_loop():
            return

        global records_list  # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏–∑ —Ä–∞—Å—à–∞—Ä–µ–Ω–Ω–æ–π –ø–∞–ø–∫–∏ –Ω–∞ Google Drive
        audio_list = get_audio_list(config['GOOGLE_DRIVE_AUDIO_URL'], status_widget)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –≤–∏–¥–∂–µ—Ç–µ
        progress.value = 80  # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        audio_widget.value = '<h2>‚úÖ –ê—É–¥–∏–æ–∑–∞–ø–∏—Å–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.</h2>'

        sleep(.3)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ stopLoop –∏–∑ JavaScript
        if check_stop_loop():
            return
        #clear_output()

        # –ù–∞–∑–Ω–∞—á–∞–µ–º –∫–ª–∞—Å—Å –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –≤–∏–¥–∂–µ—Ç–∞
        status_widget.add_class('hidden')
        sleep(.1)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ stopLoop –∏–∑ JavaScript
        if check_stop_loop():
            return

        # –ù–∞–∑–Ω–∞—á–∞–µ–º –∫–ª–∞—Å—Å –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –≤–∏–¥–∂–µ—Ç–∞
        config_widget.add_class('hidden')
        sleep(.3)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ stopLoop –∏–∑ JavaScript
        if check_stop_loop():
            return


        # –°–æ—Ä—Ç–∏—Ä—É–µ–º audio_list –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
        audio_list = sorted(audio_list, key=lambda x: datetime.strptime(x['date_time'], '%Y-%m-%d_%H-%M-%S') if x['date_time'] != "---" else datetime.min)
        progress.value = 85  # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ stopLoop –∏–∑ JavaScript
        if check_stop_loop():
            return

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º –∏ –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        records_list, call_stats = get_records_by_list(audio_list, max_records=config['MAX_RECORDS'])
        progress.value = 90  # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ stopLoop –∏–∑ JavaScript
        if check_stop_loop():
            return

        # clear_output()
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –ø–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º
        print(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(audio_list)}\n-----------------------------------")
        for operator, num_calls in call_stats.items():
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
            filtered_records = [record for record in audio_list if record['to_number'] == operator]

            if filtered_records:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
                min_date = min(datetime.strptime(record['date_time'], '%Y-%m-%d_%H-%M-%S') for record in filtered_records)
                max_date = max(datetime.strptime(record['date_time'], '%Y-%m-%d_%H-%M-%S') for record in filtered_records)

                # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å –ø–µ—Ä–∏–æ–¥–æ–º –∑–≤–æ–Ω–∫–æ–≤
                print(f"–û–ø–µ—Ä–∞—Ç–æ—Ä: \033[1;36m{operator:<12}\033[0m "
                      f"–ó–∞–ø–∏—Å–µ–π: \033[1;34m{num_calls:<5}\033[0m "
                      f"–ü–µ—Ä–∏–æ–¥ –∑–≤–æ–Ω–∫–æ–≤: —Å \033[1;32m{min_date.strftime('%Y-%m-%d %H:%M:%S')}\033[0m "
                      f"–ø–æ \033[1;32m{max_date.strftime('%Y-%m-%d %H:%M:%S')}\033[0m")
        progress.value = 95  # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∏—Ö –∫ –µ–¥–∏–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
        operator_list = [operator.strip() for operator in config['OPERATOR_LIST'].split(',')] if config['OPERATOR_LIST'] else []

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ stopLoop –∏–∑ JavaScript
        if check_stop_loop():
            return

        if operator_list:
            print(f"\n–°–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ (OPERATOR_LIST): \033[1;34m{', '.join(operator_list)}\033[0m\n-----------------------------------")
            # –ü—Ä–∏–≤–æ–¥–∏–º –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –∫ –µ–¥–∏–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É, —É–¥–∞–ª—è—è –≤–µ–¥—É—â–∏–µ –Ω—É–ª–∏
            normalized_operator_list = [operator.lstrip('0') for operator in operator_list]

            # –§–∏–ª—å—Ç—Ä—É–µ–º records_list –ø–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º –∏–∑ operator_list
            records_list = [record for record in records_list if record['to_number'].lstrip('0') in normalized_operator_list]
        else:
            print(f"\n–°–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (OPERATOR_LIST): \033[1;34m–í—Å–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã\033[0m\n-----------------------------------")

        print(f"\n–í—ã–±—Ä–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: \033[1;34m{len(records_list)}\033[0m\n-----------------------------------")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ stopLoop –∏–∑ JavaScript
        if check_stop_loop():
            return

        # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º
        for operator, num_calls in call_stats.items():
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É 'to_number' —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ operator_list
            filtered_records = [record for record in records_list if record['to_number'] == operator]

            if filtered_records:
                # –ü–æ–ª—É—á–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É
                min_date = min(datetime.strptime(record['date_time'], '%Y-%m-%d_%H-%M-%S') for record in filtered_records)
                max_date = max(datetime.strptime(record['date_time'], '%Y-%m-%d_%H-%M-%S') for record in filtered_records)

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –±–ª–æ–∫–∞
                print(f"–û–ø–µ—Ä–∞—Ç–æ—Ä: \033[1;36m{operator:<12}\033[0m "
                      f"–ó–∞–ø–∏—Å–µ–π: \033[1;34m{len(filtered_records):<5}\033[0m "
                      f"–ü–µ—Ä–∏–æ–¥ –∑–≤–æ–Ω–∫–æ–≤: —Å \033[1;32m{min_date.strftime('%Y-%m-%d %H:%M:%S')}\033[0m "
                      f"–ø–æ \033[1;32m{max_date.strftime('%Y-%m-%d %H:%M:%S')}\033[0m")

        progress.value = 100  # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å

    upload_button.disabled = False
    transcription_button.disabled = False
    cancel_button.disabled = True

# @title ====> **–ö–ù–û–ü–ö–ê 3 - "–û–¢–ú–ï–ù–ê".** –û—Ç–º–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ <====

def can—Åel_operation(event, client=None, verbose_level=1):
    #global is_running
    if not cancel_button.disabled:
        upload_button.disabled = False  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –≤ False –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏
        transcription_button.disabled = False  # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
        cancel_button.disabled = True
        reset_stop_loop()
        with output_area:
            #print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
            transcript_widget = widgets.HTML('<h2>‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞</h2>')
            display(transcript_widget)
        progress.value = 0

# @title –†–∞—Å–ø–æ–∑–Ω–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö –≤ Google Spreadsheets
# –í–ù–ò–ú–ê–ù–ò–ï!! –î–∞–Ω–Ω—ã–π –±–ª–æ–∫ —Å—ä–µ–¥–∞–µ—Ç –º–Ω–æ–≥–æ –¥–µ–Ω–µ–≥!
# –ï—Å–ª–∏ records_list —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–µ 'text', —Ç–æ –æ–Ω –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è records_list –≤ Google Spreadsheet
def save_records_to_google_sheets(records_list, spreadsheet_url):

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π –ª–∏—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∂–∏–º–∞
    spreadsheet_id = parse_spreadsheet_id_by_url(spreadsheet_url)
    spreadsheet = gs_client.open_by_key(spreadsheet_id)
    worksheet = spreadsheet.worksheet(config['TRANSCRIPTS_RAW_WORKSHEET'])

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ records_list –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É
    rows = []
    headers = ['–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª', '–ò–º—è —Ñ–∞–π–ª–∞', '–û–ø–µ—Ä–∞—Ç–æ—Ä', '–î–∏–∞–ª–æ–≥', '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', '–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏', '–°—Ç–æ–∏–º–æ—Å—Ç—å']  # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
    rows.append(headers)

    for record in records_list:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª –ø–æ id
        file_link = f"https://drive.google.com/file/d/{record.get('id', '')}/view" if record.get('id', '') else 'Unknown'

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ –ø–æ—Ä—è–¥–∫–µ, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∞–º
        rows.append([
            file_link,                       # –°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª
            record.get('filename', ''),     # –ò–º—è —Ñ–∞–π–ª–∞
            record.get('to_number', ''),     # –û–ø–µ—Ä–∞—Ç–æ—Ä
            record.get('text', ''),          # –î–∏–∞–ª–æ–≥
            record.get('duration', ''),      # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            record.get('elapsed_time', ''),  # –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            record.get('cost', '')           # –°—Ç–æ–∏–º–æ—Å—Ç—å
        ])

    # –û—á–∏—Å—Ç–∏–º –ª–∏—Å—Ç –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é
    worksheet.clear()

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É
    worksheet.update(rows)
    print("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ Google Spreadsheet!")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
def get_transcript_list(b):
    upload_button.disabled = True
    transcription_button.disabled = True
    cancel_button.disabled = False
    tmp_file = 'temp.mp3'
    with output_area:
        clear_output()

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
        progress.value = 0
        progress.max = len(records_list)

        # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        transcript_widget = widgets.HTML('<h2>üïë –ò–¥–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–µ–π...</h2>')
        display(transcript_widget)



        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ stopLoop –∏–∑ JavaScript
        if check_stop_loop():
            return

        for index, record in enumerate(records_list):
            if load_mp3_from_google_drive(record['id'], tmp_file) is not None:

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ stopLoop –∏–∑ JavaScript
                if check_stop_loop():
                    return

                transcript = run_transcript(record, tmp_file)

                if transcript is not None:
                    # –î–æ–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
                    records_list[index]['text'] = transcript['text']
                    records_list[index]['duration'] = transcript['duration']
                    records_list[index]['elapsed_time'] = transcript['elapsed_time']
                    records_list[index]['cost'] = transcript['cost']

                # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                os.remove(tmp_file)

            # –í—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞
            print(f'–§–∞–π–ª {index + 1} / {len(records_list)} : {record["filename"]} –æ–±—Ä–∞–±–æ—Ç–∞–Ω')
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
            progress.value += 1

        print('–í—Å–µ —Ñ–∞–π–ª—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã')

        # –ß–µ–∫–ø–æ–∏–Ω—Ç. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ Google Spreadsheet
        save_records_to_google_sheets(records_list, config['CURRENT_SPREADSHEET_URL'])

        transcript_widget.value = '<h2>‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.</h2>'
        progress.value = 100

    upload_button.disabled = False
    transcription_button.disabled = False
    cancel_button.disabled = True

"""### ======== –ë–µ–∑—É—Å–ª–æ–≤–Ω–æ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π –∫–æ–¥ ========"""

# @title –°–∏—Å—Ç–µ–º–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è, ID —Ä–∞–±–æ—á–µ–π —Ç–∞–±–ª–∏—Ü—ã.

# –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã
spreadsheet_url = 'https://docs.google.com/spreadsheets/d/1OO5uLqbgG0AeIOue-cilsHhUuEcvxA_ymov0HXp1NvQ/edit' # URL —Ä–∞–±–æ—á–µ–π —Ç–∞–±–ª–∏—Ü—ã
worksheet_name = '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è' # –ò–º—è –ª–∏—Å—Ç–∞ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
colab_id = 1 # ID –¥–∞–Ω–Ω–æ–≥–æ –Ω–æ—É—Ç–±—É–∫–∞

# @title –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞. –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ Google Spreadsheets

import pandas as pd
import gspread
from gspread_dataframe import get_as_dataframe
from google.oauth2.service_account import Credentials
import json
import re

from time import sleep

def parse_spreadsheet_id_by_url(url):
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è spreadsheet_id –∏–∑ URL
    match = re.search(r'/d/([a-zA-Z0-9-_]+)', url)
    if match:
        return match.group(1)  # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º spreadsheet_id
    else:
        raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ Google –¢–∞–±–ª–∏—Ü—É")

def spreadsheets_auth():
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏ API
    scopes = ["https://www.googleapis.com/auth/spreadsheets", "https://www.googleapis.com/auth/drive"]

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–ª—é—á API Google
    from google.colab import userdata
    service_account_info = userdata.get('GOOGLE_JSON')
    service_account_info_dict = json.loads(service_account_info)

    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    credentials = Credentials.from_service_account_info(service_account_info_dict, scopes=scopes)

    # –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è
    client = gspread.authorize(credentials)

    return client

def load_config(client, colab_id, spreadsheet_url):
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π –ª–∏—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∂–∏–º–∞
    spreadsheet_id = parse_spreadsheet_id_by_url(spreadsheet_url)
    spreadsheet = client.open_by_key(spreadsheet_id)
    worksheet = spreadsheet.worksheet(worksheet_name)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Google –¢–∞–±–ª–∏—Ü—ã –≤ DataFrame
    df_config = get_as_dataframe(worksheet, dtype=str, header=0)

    # –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ NaN, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å, –Ω–∞ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    df_config = df_config.fillna('')

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏, –≥–¥–µ Colab_ID == 0 –∏–ª–∏ Colab_ID == colab_id
    df_filtered = df_config[(df_config['Colab_ID'] == '0') | (df_config['Colab_ID'] == str(colab_id))]

    # –ü—Ä–æ–±–µ–∂–∏–º—Å—è –ø–æ —Å—Ç—Ä–æ–∫–∞–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞ –∏ –∑–∞–ø–æ–ª–Ω–∏–º —Å–ª–æ–≤–∞—Ä—å
    config = {}

    for index, row in df_filtered.iterrows():
        constant_name = row['–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞']
        constant_value = row['–ó–Ω–∞—á–µ–Ω–∏–µ']
        config[constant_name] = constant_value

    return config

# –û–±–µ—Ä—Ç–∫–∞ –∫ load_config
def re_config(client, colab_id, spreadsheet_url):
    config = load_config(client, colab_id, spreadsheet_url)
    if config['SPREADSHEED_OVERRIDE']:
        config = load_config(client, colab_id, config['SPREADSHEED_OVERRIDE'])
        config['CURRENT_SPREADSHEET_URL'] = config['SPREADSHEED_OVERRIDE']
    else:
        config['CURRENT_SPREADSHEET_URL'] = spreadsheet_url

    # –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
    # config['TEST_MODE'] = True if config['TEST_MODE'] == "1" else False # True - —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º, False - —Ä–∞–±–æ—á–∏–π —Ä–µ–∂–∏–º

    return config

gs_client = spreadsheets_auth()
config = re_config(gs_client, colab_id, spreadsheet_url)

display(config)

# @title –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫, –∏–º–ø–æ—Ä—Ç—ã –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenAI
!pip install -q --upgrade openai
!pip install -q pydub
!pip install -q mutagen

import re
import requests
import openai
import getpass
import os
import io
import time
from pydub import AudioSegment
from mutagen.mp3 import MP3
from tqdm import tqdm

from openai import OpenAI
import os
from google.colab import userdata
openai_key = userdata.get('OPENAI_API_KEY');
os.environ["OPENAI_API_KEY"] = openai_key

"""# –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥—É–ª–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–µ–π"""

# @title –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥—É–ª–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–µ–π
import ipywidgets as widgets
from IPython.display import display, clear_output, update_display
from IPython.core.display import HTML

# CSS –∏ HTML –¥–ª—è –∫–Ω–æ–ø–æ–∫
style_html = widgets.HTML("""
<style>
@import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@400;700&display=swap');

.medsonar-header{
    text-align: left;
    margin-bottom: 40px;
    display: flex;
    flex-direction: column;
}

.custom-buttons{
    display: flex;
    flex-direction: column;
    margin-right:30px;
}

.custom-button {
    background-color: white;
    color: #00abb8;
    font-weight: bold;
    font-size:.95rem;
    text-transform: uppercase;
    border: #00abb8 2px solid;
    border-radius: 24px;
    padding: 10px 20px;
    margin: 0 0 10px 0;
    transition: background-color 0.3s, color 0.3s;
    font-family: 'Montserrat', sans-serif;
}
.cancel-button{
    color: #cf2d46;
    border-color: #cf2d46;
    outline: none;
}
.custom-button:hover {
    background-color: #00abb8;
    color: white;
    box-shadow: none!important;
}

.cancel-button:hover{
    background-color: #cf2d46;
    box-shadow: none;
    outline: none;
}
.custom-button:disabled {
    background-color: #e0e0e0; /* –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π —Ü–≤–µ—Ç */
    color: #aaaaaa; /* –¢—É—Å–∫–ª—ã–π —Ç–µ–∫—Å—Ç */
    border-color: #cccccc; /* –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π —Ü–≤–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã */
}
/* –°–≤–æ–π hover –¥–ª—è disabled */
.custom-button:disabled:hover {
    background-color: #ddd; /* –°–µ—Ä—ã–π —Ü–≤–µ—Ç */
    color: #888; /* –°–µ—Ä—ã–π —Ç–µ–∫—Å—Ç */
    border-color: #bbb; /* –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π —Ü–≤–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã */
    cursor: auto;
}

.output-area{
    padding:10px;
    border-radius:3px;
}
h2 {
    font-size: 20px;
    line-height: 1;
    font-weight: bold;
}
h1, h2, h3, h4, h5 {
    font-family: 'Montserrat', sans-serif;
}


/* –ù–∞—á–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –≤–∏–¥–∂–µ—Ç–æ–≤ */
.config-widget,
.status-widget {
  max-height: 150px; /* –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ —Å—Ö–ª–æ–ø—ã–≤–∞–Ω–∏—è */
  opacity: 1;
  overflow: hidden;
  transition: max-height .3s ease, opacity .3s ease;
}

/* –°—Ç–∏–ª–∏ –¥–ª—è —Å–∫—Ä—ã—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è */
.hidden {
  max-height: 0;
}
</style>
""")

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–∞—è –Ω–∞–¥–ø–∏—Å—å
welcome_label = widgets.HTML(
    value=f"""
    <div class='medsonar-header'>
        <span style='font-size: 2rem; font-weight:bold; color:#333;'>–°–∏—Å—Ç–µ–º–∞ –Ω–µ–π—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞ –ú–µ–¥—Å–æ–Ω–∞—Ä</span>
        <span style='font-size: 1rem; font-weight:bold; color:#333;'><br>–ú–æ–¥—É–ª—å 1. C–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–π –ø–æ –∞—É–¥–∏–æ –∑–∞–ø–∏—Å—è–º</span>
    </div>
    """
)

# –§–æ—Ä–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ª—É–∂–µ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
output_area = widgets.Output(
    layout=widgets.Layout(
        width='1000px',
        height='400px',
        overflow='auto',
        border='1px solid #00abb8'  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç –æ–∫–∞–π–º–ª–µ–Ω–∏—è
    )
)
with output_area:
    display(HTML("<h1 style='font-size: 20px;'><center>–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–π—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞! <br><br> –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤</center></h1>"))

#–í–∏–¥–∂–µ—Ç –ø–æ–ª–æ—Å—ã —Å—Ç–∞—Ç—É—Å–∞
progress = widgets.IntProgress(min=0, max=100, value=0, layout=widgets.Layout(width='1020px'))

# –ö–Ω–æ–ø–∫–∏
upload_button = widgets.Button(description="–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤", layout=widgets.Layout(height='50px', width='330px'))
transcription_button = widgets.Button(description="–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è", layout=widgets.Layout(height='50px', width='330px'))
cancel_button = widgets.Button(description="–û—Ç–º–µ–Ω–∞", layout=widgets.Layout(height='50px', width='330px'))

# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª—è –∫ –∫–Ω–æ–ø–∫–∞–º
upload_button.add_class('custom-button')
transcription_button.add_class('custom-button')
cancel_button.add_class('custom-button')
cancel_button.add_class('cancel-button')
output_area.add_class('output-area')


def display_buttons():
    clear_output(wait=True)
    display(welcome_label)

    button_box = widgets.VBox([upload_button, transcription_button, cancel_button],
                              layout=widgets.Layout(width='350px'))
    # –°–æ–∑–¥–∞–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è output_area –∏ progress
    output_and_progress_box = widgets.VBox([output_area, progress])
    hbox = widgets.HBox([button_box, output_and_progress_box])
    display(style_html)
    display(hbox)


# –ü—Ä–∏–≤—è–∑–∫–∞ –∫–Ω–æ–ø–æ–∫ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º
upload_button.on_click(on_upload_button_click)
transcription_button.on_click(get_transcript_list)
cancel_button.on_click(can—Åel_operation)

# –í—ã–≤–æ–¥ –≤–∏–¥–∂–µ—Ç–æ–≤
display(style_html)
display_buttons()

cancel_button.disabled = True

js_code = """
<script>
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ñ–ª–∞–≥–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–∏–∫–ª–∞
    function resetStopLoop() {
        if (stopLoop) {
            stopLoop = false;
            console.log("JavaScript: –§–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–±—Ä–æ—à–µ–Ω, stopLoop = false");
        }
    }

    document.querySelectorAll('.cancel-button').forEach((el, index) => {
        if (el.textContent.includes('–û—Ç–º–µ–Ω–∞')) {
            el.setAttribute('id', 'cancelButton');
        }
    });
    var stopLoop = false;
    document.getElementById('cancelButton').onclick = function() {
        stopLoop = true;
        console.log("JavaScript: –ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞, stopLoop = true");
        this.disabled = true; // –°–¥–µ–ª–∞—Ç—å –∫–Ω–æ–ø–∫—É –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–π –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
        this.textContent = "üïë –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è..."; // –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
    }
</script>
"""
display(HTML(js_code))
